---
categories: Python, Computing
date: 2012/04/05 18:09:25
permalink: http://rhodesmill.org/brandon/2012/adventure/
tags: ''
title: Adventure in Python 3
---

I have just released
`adventure 1.2 <http://pypi.python.org/pypi/adventure/>`_
on the Python Package Index,
an update of my Python 3 port
of the original Colossal Cave Adventure game
that I announced last year during the final round of
`PyCon 2011 lightning talks <http://pyvideo.org/video/357/pycon-2011--sunday-afternoon-lightning-talks>`_.

.. image:: http://rhodesmill.org/brandon/2012/adventure-heathkit-H19.jpg
   :target: http://www.flickr.com/photos/brandonrhodes/6115627693/

“Adventure” was the first game
to offer players a world to explore at their own pace,
driven by their own curiosity.
With simple one- and two-word commands
like ``ENTER`` ``BUILDING`` and ``GET`` ``LAMP``,
as well as cardinal directions
that could, mercifully, be typed as abbreviations
(``N``, ``NE``, ``E``, ``SE``, and so forth,
with ``U`` and ``D`` for up and down),
you entered a series of caves —
based realistically on a section
of the Flint-Mammoth cave system in Kentucky
that the author himself had helped explore —
and could start collecting treasures in a quest
that involved danger, magic, and even encounters
with a few other characters,
who rustled in the shadows beyond the range of your lamp
before finally pouncing.

Keep reading if you want to learn
about several discoveries that I made
while porting “Adventure” to Python!
If you want to know more about the history of the original game itself,
I recommend Dennis G. Jerz's admirably thorough paper
“`Somewhere Nearby is Colossal Cave: Examining Will Crowther's Original "Adventure" in Code and in Kentucky <http://www.digitalhumanities.org/dhq/vol/001/2/000009/000009.html>`_”
from the Summer 2007 issue of the Digital Humanities Quarterly.

.. more

Playing at the prompt
---------------------

first lesson python can respond to single-word commands

easy to respond to two-word commands

just had to inject symbols into calling context

so they can say .play() and the game can begin

but one-word commands do no call
simply naming a function does not invoke it
unlike Ruby where you have to do a dance to get a ref to a function

so I overrode __repr__

De Morgan and old FORTRAN
-------------------------

The original FORTRAN language
in which “Adventure” was written
did not support “structured programming” —
you could not combine several statements into a single block of code
under the control of an ``IF`` statement or a loop.
Instead,
the ``IF`` statement could only control
the single statement that followed it,
so if several statements needed protection
then you had to ``GOTO`` a line number
placed down at the end of your “block.”
Here is an except from ``advent.for``
in which an ``IF`` clause controls two statements,
with normal execution continuing at line ``2630``::

 2610    IF(WD1.NE.'WEST')GOTO 2630
         IWEST=IWEST+1
         IF(IWEST.EQ.10)CALL RSPEAK(17)
 2630    ...

In Python the line number and ``GOTO`` can be dispensed with
in favor of simply indenting the lines that run conditionally::

            if word1 == 'west':
                full_wests += 1
                if full_wests == 10:
                    write_message(17)

You will note that my outer Python ``if`` statement
tests a condition that is, in fact, the complete *opposite*
of its equivalent in FORTRAN:
the original code wants the word to not-equal ``'WEST'``
whereas, in my rewrite, I want them to be equal.
The reason is plain enough:
while my modern Python code gets to test
whether we want to execute the following block of code,
the original FORTRAN has to think backwards
and test whether to invoke the ``GOTO``
and thus *skip* the statements that follow.

(Note that the second ``IF`` statement
controls only a single line of code,
and gets to be written “forwards” instead of “backwards” even in FORTRAN.
It therefore survives its translation into Python unchanged.)

Flipping a simple ``.NE.`` so that it becomes ``==`` is simple enough.
But what happens when I need to
`reverse the polarity <http://en.wikipedia.org/wiki/Third_Doctor#.22Reverse_the_polarity.22>`_
of a more complex expression


Great experiences at 1200 baud
------------------------------


