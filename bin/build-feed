#!/usr/bin/env python

import datetime
import os
import re
import sys
import time
from email.utils import formatdate

import xml.etree.ElementTree as etree
from pytz import timezone

atom_ns = 'http://www.w3.org/2005/Atom'
content_ns = 'http://purl.org/rss/1.0/modules/content/'
eastern = timezone('US/Eastern')
more_template = '<p><a href="{}">Read the full article...</a></p>'

def truncate_at_more(body, url):
    pieces = re.split(r'<!-- *more *-->', body)
    if len(pieces) == 1:
        return body
    return pieces[0] + more_template.format(url)

def make_links_absolute(body):
    body = body.replace('href="/', 'href="http://rhodesmill.org/')
    return body

def main():
    tag_cache_path = sys.argv[1]
    tag = sys.argv[2]
    outpath = sys.argv[3]

    sub = etree.SubElement
    now = datetime.datetime.now()

    etree.register_namespace('atom', atom_ns)
    etree.register_namespace('content', content_ns)

    feed = etree.Element('rss', version='2.0')
    channel = sub(feed, 'channel')
    sub(channel, '{%s}link' % atom_ns, rel="self", type="application/rss+xml",
        href="http://rhodesmill.org/brandon/category/python/feed/")
    sub(channel, 'link').text = "http://rhodesmill.org/brandon/"
    sub(channel, 'pubDate').text = formatdate()
    sub(channel, 'title').text = "Python posts by Brandon Rhodes"
    sub(channel, 'description').text = (
        "Blog posts about the Python programming language")

    with open(tag_cache_path) as f:
        lines = f.readlines()

    for line in lines:
        if not line.startswith('#'):  # data we want is in the comments
            continue
        hash_sign, this_tag, post_cache_path = line.split()
        if this_tag != tag:
            continue
        with open(post_cache_path) as ff:
            info = eval(ff.read())

        url = 'http://rhodesmill.org/brandon/2013/example-pycon-proposals/'

        body = info['body']
        body = truncate_at_more(body, url)
        body = make_links_absolute(body)

        item = sub(channel, 'item')
        sub(item, 'guid').text = url
        sub(item, 'link').text = url
        sub(item, 'title').text = info['title']
        sub(item, 'pubDate').text = formatdate(time.mktime(
                datetime.datetime(2013, 8, 3, 23, 16, 0, 0, eastern)
                .timetuple()))
        sub(item, '{%s}encoded' % content_ns).text = body

    outdir = os.path.dirname(outpath)
    if not os.path.isdir(outdir):
        os.makedirs(outdir)
    with open(outpath, 'w') as f:
        f.write(etree.tostring(feed))

if __name__ == '__main__':
    main()
