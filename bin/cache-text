#!/usr/bin/env python

import os
import re
import sys

from datetime import datetime
from docutils.core import publish_parts
from pprint import pformat

from IPython.config import Config
from IPython.nbconvert import HTMLExporter
from IPython.nbformat import current as nbformat

from pygments import highlight
from pygments.lexers import guess_lexer
from pygments.formatters import HtmlFormatter

overrides = {'initial_header_level': 2}

def main():
    input_path, output_path = sys.argv[1:]

    with open(input_path) as f:
        text = f.read().decode('utf-8')

    if input_path.endswith('.rst'):
        info = parse_rst(text)
    elif input_path.endswith('.html'):
        info = parse_html(text)
    elif input_path.endswith('.ipynb'):
        info = parse_ipynb(text)
    else:
        raise ValueError('unrecognized extension: %s' % input_path)

    info['html_body'] = info['html_body'].replace('\n</pre>', '</pre>')
    info['path'] = output_path

    output_dir = os.path.dirname(output_path)
    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)

    with open(output_path, 'w') as f:
        f.write(pformat(info))
        f.write('\n')

    # in_html = info['html_body']
    # in_html += u'\n%rebase layout title="{}"\n'.format(info['title'])

def parse_rst(rst):
    field_strings = re.findall(r'\n:([^:]+): +(.*)', rst)
    fields = dict((name.lower(), value) for name, value in field_strings)
    info = publish_parts(rst, writer_name='html', settings_overrides=overrides)
    info['fields'] = fields
    if 'date' in fields:
        info['date'] = datetime.strptime(fields['date'], '%d %B %Y').date()
    info['tags'] = set()
    if 'tags' in fields:
        info['tags'].update('-'.join(tag.strip().lower().split())
                            for tag in fields['tags'].split(','))
    return info

def parse_html(html):
    info = {}
    is_legacy_blogofile = html.startswith('---')

    if is_legacy_blogofile:
        empty_string, header, body = html.split('---')
        header = header.strip()
        body = pygmentize_pre_blocks(body)
        fields = dict(line.strip().split(': ') for line in header.splitlines())

        info['html_body'] = u'<h1>' + fields[u'title'] + u'</h1>' + body
        info['body'] = body
        info['title'] = fields[u'title']
        info['date'] = datetime.strptime(fields[u'date'], '%Y/%m/%d %H:%M:%S'
                                         ).date()
    else:
        info['html_body'] = html
        info['body'] = html
        info['title'] = 'PUT TITLE HERE'

    return info

def parse_ipynb(json_text):
    notebook = nbformat.reads_json(json_text)

    config = Config({'HTMLExporter': {'default_template': 'basic'}})
    exporter = HTMLExporter(config=config)
    body, resources = exporter.from_notebook_node(notebook)

    info = {}
    info['html_body'] = body
    match = re.search(ur'<h1[^>]*>([^>]*)</h1>', body)
    if match:
        info['body'] = body[match.end(0):]
        info['title'] = match.group(1)
    else:
        info['body'] = body
        info['title'] = ''

    info['needs_mathjax'] = r'\(' in body

    fields = notebook['metadata']
    info['fields'] = fields
    if 'date' in fields:
        info['date'] = datetime.strptime(fields['date'], '%d %B %Y').date()
    info['tags'] = set()
    if 'tags' in fields:
        info['tags'].update('-'.join(tag.strip().lower().split())
                            for tag in fields['tags'].split(','))

    return info

def pygmentize_pre_blocks(html):
    formatter = HtmlFormatter()

    def _highlight(match):
        code = match.group(2)
        lexer = guess_lexer(code)
        return highlight(code, lexer, formatter)
        # TODO: return u'<pre{}>{}</pre>'.format(match.group(1), h)?

    return re.sub(ur'(?s)<pre([^>]*)>(.*?)</pre>', _highlight, html)

if __name__ == '__main__':
    main()
